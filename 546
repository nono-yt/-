int a =800,b=100;
 void setup () { Serial.begin(115200);
 pinMode(10,OUTPUT);
}
void loop() {
 int n = analogRead(A3);
Serial.println(n); 
if ((n<= a )&&(n>=b））
 digitalWrite(10,HIGH);
else digitalWrite(10,LOW);
 delay(100); 
 }

#define NOTE_D0 -1   //音符对应的相应频率
#define NOTE_D1 523  //NOTE_D表示D调
#define NOTE_D2 587
#define NOTE_D3 659
#define NOTE_D4 698
#define NOTE_D5 784
#define NOTE_D6 880
#define NOTE_D7 988

#define NOTE_DL1 261 //NOTE_DL表示D调LOW
#define NOTE_DL2 294
#define NOTE_DL3 329
#define NOTE_DL4 349
#define NOTE_DL5 392
#define NOTE_DL6 440
#define NOTE_DL7 493

#define NOTE_DH1 1046//NOTE_DH表示D调HIGH
#define NOTE_DH2 1175
#define NOTE_DH3 1318
#define NOTE_DH4 1397
#define NOTE_DH5 1568
#define NOTE_DH6 1760
#define NOTE_DH7 1976

#define WHOLE 1 //停顿
#define HALF 0.5
#define QUARTER 0.25
#define EIGHTH 0.25
#define SIXTEENTH 0.625

int tune[] =     //以下为《世上只有妈妈好》乐谱中音符部分，用tune整数序列表示
{
 NOTE_D6,NOTE_D5,
 NOTE_D3,NOTE_D5,
 NOTE_DH1,NOTE_D6,NOTE_D5,
 NOTE_D6,
 NOTE_D3,NOTE_D5,NOTE_D6,
 NOTE_D5,NOTE_D3,NOTE_D2,
 NOTE_D1,NOTE_DL6,NOTE_D5,NOTE_D3,
 NOTE_D2,
 NOTE_D2,NOTE_D3,
 NOTE_D5,NOTE_D5,NOTE_D6,
 NOTE_D5,NOTE_D2,
 NOTE_D1,
 NOTE_D5,NOTE_D3,
 NOTE_D2,NOTE_D1,NOTE_DL6,NOTE_D5,
 NOTE_DL5,
 NOTE_D6,NOTE_D5,
 NOTE_D3,NOTE_D5,
 NOTE_DH1,NOTE_D6,NOTE_D5,
 NOTE_D6,
 NOTE_D3,NOTE_D5,NOTE_D6,
 NOTE_D5,NOTE_D3,NOTE_D2,
 NOTE_D1,NOTE_DL6,NOTE_D5,NOTE_D3,
 NOTE_D2,
 NOTE_D2,NOTE_D3,
 NOTE_D5,NOTE_D5,NOTE_D6,
 NOTE_D5,NOTE_D2,
 NOTE_D1,
 NOTE_D5,NOTE_D3,
 NOTE_D2,NOTE_D1,NOTE_DL6,NOTE_D5,
 NOTE_DL5,
 
};
float duration[]=  //以下为《世上只有妈妈好》节拍部分，用浮点序列duration表示
{
 1+0.5,1, //1
 1,1,//2
 1,0.5,0.5, //3
 1+1,//4
 1,0.5,0.5, //5
 1,0.5,0.5, //6
 0.5,0.5,0.5,0.5, //7
 1+1, //8
 1+0.5,0.5 ,//9
 1,0.5,0.5, //10
 1+0.5,0.5 ,//11
 1+1, //12
 1+0.5,0.5, //13
 0.5,0.5,0.5,0.5, //14
 1+1,//15
 1+0.5,1, //1
 1,1,//2
 1,0.5,0.5, //3
 1+1,//4
 1,0.5,0.5, //5
 1,0.5,0.5, //6
 0.5,0.5,0.5,0.5 ,//7
 1+1, //8
 1+0.5,0.5, //9
 1,0.5,0.5, //10
 1+0.5,0.5, //11
 1+1, //12
 1+0.5,0.5, //13
 0.5,0.5,0.5,0.5, //14
 1+1,//15
};
int length;//这里定义一个变量，后面用来表示共有多少个音符
int tonePin=5;//蜂鸣器的pin
int tonePIN=9;//蜂鸣器pin
const int buttonPin = 2; //按键模块
//int buttonState = 0;    //按键状态
int state=0; //控制蜂鸣器
int val=0;  //按钮状态
int old_val=0; //上一次按钮状态


void setup()
{
   pinMode(tonePin,OUTPUT);//设置蜂鸣器的pin为输出模式
   pinMode(tonePIN,OUTPUT);
  length = sizeof(tune)/sizeof(tune[0]);//这里用了一个sizeof函数，可以查出tone序列里有多少个音符
   pinMode(buttonPin, INPUT);//设置按键模块
   Serial.begin(115200);
   
  
}

void loop()
{for(int x=0;x<length;x++)//循环音符的次数
  {
    val = digitalRead(buttonPin);//读取按键状态
    if((val == HIGH)&&(old_val == LOW))//按键状态寄存器
    {
    state =1-state;
    delay(40); 
   }
  old_val = val;           
    if (state == HIGH) 
    {
      tone(tonePin,tune[x]);//此函数依次播放tune序列里的数组，即每个音符
      delay(350*duration[x]);//每个音符持续的时间，即节拍duration，调整时间越大，曲子速度越慢；越小曲子速度越快
      noTone(tonePin);//停止当前音符，进入下一音符
      tone(tonePIN,tune[x]);
    delay(250*duration[x]);
    noTone(tonePIN);//停止当前音符，进入下一音符
    
    Serial.print(state);//可用串口监视器观察按键状态
    }
    else
    {
      x=x-1;//停止在当前位置
      Serial.print(state);
    }
  }
}


void setup()
{
  pinMode(11, OUTPUT);  
  pinMode(10, OUTPUT);  
  pinMode(9, OUTPUT);   
  pinMode(6,OUTPUT);
  pinMode(5,OUTPUT);
  pinMode(3,OUTPUT); 
}
 
void loop()
{
  digitalWrite(11,HIGH); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(900);   //1                                                                                                              
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);    //2                                                                                                             
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(600);   //3                                                                                                             
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(600);   //4                                                                                                              
  digitalWrite(11,HIGH); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(600);   //5                 
  digitalWrite(11,HIGH); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);   //6                 
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);   //7                 
  digitalWrite(11,HIGH); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(1200);    //8                
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(600);    //9                
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);    //10                
  digitalWrite(11,HIGH); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);    //11                
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(600);    //12                
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);   //13   
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,HIGH);digitalWrite(3,LOW);
  delay(300);    //14
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,HIGH);
  delay(900);     //15            
  digitalWrite(11,HIGH); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);      //16           
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);     //17               
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);     //18               
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,HIGH);digitalWrite(3,LOW);
  delay(1200);     //19               
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,HIGH);digitalWrite(3,LOW);
  delay(900);     //20               
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);    //21
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(600);    //22                
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);    //23                
  digitalWrite(11,HIGH); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);    //24                
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(900);    //25                
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,HIGH);digitalWrite(3,LOW);
  delay(300);    //26    
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,HIGH);
  delay(1200);     //27               
  digitalWrite(11,LOW); digitalWrite(10,HIGH); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(900);     //28               
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(300);     //29               
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,HIGH);digitalWrite(3,LOW);
  delay(300);     //30              
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,HIGH);
  delay(300);     //31              
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,HIGH);digitalWrite(3,HIGH);
  delay(300);     //32               
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,LOW);digitalWrite(6,LOW);digitalWrite(5,LOW);digitalWrite(3,HIGH);
  delay(300);     //33                                                                            
  digitalWrite(11,LOW); digitalWrite(10,LOW); digitalWrite(9,HIGH);digitalWrite(6,HIGH);digitalWrite(5,LOW);digitalWrite(3,LOW);
  delay(1300);      //end
             
}


#include <avr/sleep.h>
#include <avr/power.h>
#include <IRremote.h>
const unsigned char PROGMEM Hao[] = {
0x10,0x00,0x10,0xFC,0x10,0x04,0x10,0x08,0xFC,0x10,0x24,0x20,0x24,0x20,0x25,0xFE,#include <U8glib.h>

0x24,0x20,0x48,0x20,0x28,0x20,0x10,0x20,0x28,0x20,0x44,0x20,0x84,0xA0,0x00,0x40,
};
const unsigned char PROGMEM Ya[] = {
0x00,0x00,0x03,0xFC,0x78,0x10,0x49,0x10,0x49,0x10,0x49,0x10,0x4A,0x10,0x4B,0xFE,
0x48,0x30,0x48,0x50,0x78,0x90,0x49,0x10,0x02,0x10,0x04,0x10,0x00,0x50,0x00,0x20,
};
const unsigned char PROGMEM Shi[] = {
0x1F,0xF0,0x10,0x10,0x10,0x10,0x1F,0xF0,0x10,0x10,0x10,0x10,0x1F,0xF0,0x00,0x00,
0xFF,0xFE,0x01,0x00,0x11,0x00,0x11,0xF8,0x11,0x00,0x29,0x00,0x45,0x00,0x83,0xFE,
};
const unsigned char PROGMEM Meng[] = {
0x08,0x20,0x08,0x20,0xFF,0xFE,0x08,0x20,0x00,0x00,0x00,0xFC,0x7C,0x84,0x44,0x84,
0x44,0xFC,0x7C,0x84,0x44,0x84,0x44,0xFC,0x7C,0x84,0x44,0x84,0x01,0x14,0x02,0x08,
};
const unsigned char PROGMEM Sheng[] = {
0x01,0x00,0x11,0x00,0x11,0x00,0x11,0x00,0x3F,0xFC,0x21,0x00,0x41,0x00,0x81,0x00,
0x01,0x00,0x3F,0xF8,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0xFF,0xFE,0x00,0x00
};
const unsigned char PROGMEM Ri[] = {
0x00,0x00,0x1F,0xF0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0xF0,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1F,0xF0,0x10,0x10
};
const unsigned char PROGMEM Kuai[] = {
0x10,0x40,0x10,0x40,0x10,0x40,0x13,0xF8,0x18,0x48,0x54,0x48,0x50,0x48,0x50,0x48,
0x97,0xFE,0x10,0x40,0x10,0xA0,0x10,0xA0,0x11,0x10,0x11,0x10,0x12,0x08,0x14,0x06
};
const unsigned char PROGMEM Le[] = {
0x00,0x20,0x00,0xF0,0x1F,0x00,0x10,0x00,0x11,0x00,0x21,0x00,0x21,0x00,0x3F,0xFC,
0x01,0x00,0x09,0x20,0x09,0x10,0x11,0x08,0x21,0x04,0x41,0x04,0x05,0x00,0x02,0x00
};
const unsigned char PROGMEM Tan[] = {
0x00,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,
0x10,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x00,0x00,0x00
};
const unsigned char PROGMEM Tian[] = {
0x00,0x00,0x3F,0xF8,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0xFF,0xFE,0x01,0x00,
0x02,0x80,0x02,0x80,0x04,0x40,0x04,0x40,0x08,0x20,0x10,0x10,0x20,0x08,0xC0,0x06
};
const unsigned char PROGMEM Kai[] = {
0x00,0x00,0x7F,0xFC,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0xFF,0xFE,
0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x10,0x20,0x10,0x20,0x20,0x20,0x40,0x20
};
const unsigned char PROGMEM Xin[] = {
0x00,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x04,0x00,0x04,0x08,0x24,0x04,
0x24,0x04,0x24,0x02,0x44,0x02,0x44,0x12,0x84,0x10,0x04,0x10,0x03,0xF0,0x00,0x00
};
const unsigned char PROGMEM Wo[] = {
0x04,0x40,0x0E,0x50,0x78,0x48,0x08,0x48,0x08,0x40,0xFF,0xFE,0x08,0x40,0x08,0x44,
0x0A,0x44,0x0C,0x48,0x18,0x30,0x68,0x22,0x08,0x52,0x08,0x8A,0x2B,0x06,0x10,0x02,
};
const unsigned char PROGMEM Ai[] = {
0x00,0x08,0x01,0xFC,0x7E,0x10,0x22,0x10,0x11,0x20,0x7F,0xFE,0x42,0x02,0x82,0x04,
0x7F,0xF8,0x04,0x00,0x07,0xF0,0x0A,0x10,0x11,0x20,0x20,0xC0,0x43,0x30,0x1C,0x0E,
};
const unsigned char PROGMEM Ni[] = {
0x08,0x80,0x08,0x80,0x08,0x80,0x11,0xFE,0x11,0x02,0x32,0x04,0x34,0x20,0x50,0x20,
0x91,0x28,0x11,0x24,0x12,0x24,0x12,0x22,0x14,0x22,0x10,0x20,0x10,0xA0,0x10,0x40,
};

int RECV_PIN = 10;
IRrecv irrecv(RECV_PIN);
decode_results results;

#define INTERVAL_LCD             20             //定义OLED刷新时间间隔  
unsigned long lcd_time = millis();                 //OLED刷新时间计时器
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);     //设置OLED型号  
//-------字体设置，大、中、小
#define setFont_L u8g.setFont(u8g_font_7x13)
#define setFont_M u8g.setFont(u8g_font_fixed_v0r)
#define setFont_S u8g.setFont(u8g_font_fixed_v0r)
#define setFont_SS u8g.setFont(u8g_font_fub25n)
 
int pin2 = 2;//触摸开关接D2
 
long previousMillis = 0;        // 存储LED最后一次的更新
long interval = 5000;           // 闪烁的时间间隔（毫秒）
unsigned long currentMillis=0;

void pin2Interrupt(void) {
    /* 中断唤醒 */
 
    /*当中断引脚为低电平时关闭中断*/
    Serial.println("wake up!!!");
    detachInterrupt(0);
}
void enterSleep(void) {

    attachInterrupt(0, pin2Interrupt, LOW);
    delay(100);
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);//控制处理器进入睡眠模式
    sleep_enable();
    sleep_mode();
    sleep_disable();
}
void setup() {
    Serial.begin(9600);//初始化串口
    /* Setup the pin direction. */
    pinMode(pin2, INPUT);//设置端口模式为输入
    irrecv.enableIRIn(); // 启动红外解码
    Serial.println("Initialisation complete.");
}
void loop() {
    currentMillis = millis();//读取系统计时器
    Serial.print("Awake for ");
    Serial.print(currentMillis - previousMillis, DEC);//计算清醒时间
    Serial.println(" second");
    delay(1000);

    if (irrecv.decode(&results)) {
      Serial.println(results.value, HEX);//串口打印接收的红外信息
  
 
      previousMillis = currentMillis;//存储本次循环结束时的时间点
    }

    if(currentMillis - previousMillis > interval) {//如果清醒时间大于了设置的时间
      previousMillis = currentMillis; //清零清醒时间
      Serial.println("Entering sleep");
      enterSleep();//进入睡眠
    }
  if(currentMillis<previousMillis)
    previousMillis=currentMillis=0; //如果系统计时器清0，则清0 所有计时器相关的变量。
    if (irrecv.decode(&results)) {//如果接收并解码成功
    Serial.println(results.value, HEX);//打印
    
    u8g.firstPage();
  do {

          setFont_M;
        if (results.value == 0x1FE807F)
         { u8g.drawBitmapP(0, 0, 2, 16, Ni);
           u8g.drawBitmapP(20, 0, 2, 16, Hao);
           u8g.drawBitmapP(40, 0, 2, 16, Ya);
           u8g.drawBitmapP(60, 0, 2, 16, Tan);
         };
         if (results.value == 0x1FE40BF) 
           u8g.drawBitmapP(0, 0, 2, 16, Wo);
           u8g.drawBitmapP(20, 0, 2, 16, Shi);
           u8g.drawBitmapP(40, 0, 2, 16, Meng);
           u8g.drawBitmapP(60, 0, 2, 16, Meng);
          };
          } while( u8g.nextPage() );
           u8g.firstPage();
  do {
          if (results.value == 0x1FEC03F)
         { u8g.drawBitmapP(0, 0, 2, 16, Sheng); 
           u8g.drawBitmapP(20, 0, 2, 16, Ri); 
           u8g.drawBitmapP(40, 0, 2, 16, Kuai);
           u8g.drawBitmapP(60, 0, 2, 16, Le);
           u8g.drawBitmapP(80, 0, 2, 16, Tan);
          }   ;
        
      if (results.value == 0x1FE20DF)
         { u8g.drawBitmapP(0, 0, 2, 16, Tian);
           u8g.drawBitmapP(20, 0, 2, 16, Tian); 
           u8g.drawBitmapP(40, 0, 2, 16, Kai); 
           u8g.drawBitmapP(60, 0, 2, 16, Xin); 
           u8g.drawBitmapP(80, 0, 2, 16, Tan);
          };
      if (results.value == 0x1FE609F)
         { u8g.drawBitmapP(0, 0, 2, 16, Wo);
           u8g.drawBitmapP(20, 0, 2, 16, Ai);
           u8g.drawBitmapP(40, 0, 2, 16, Ni);
           u8g.drawBitmapP(60, 0, 2, 16, Tan);
           }    
         
    } while( u8g.nextPage() );
irrecv.resume(); // Receive the next value
    }
}
